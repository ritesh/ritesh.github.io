<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>

    <title>@rsinha’s blog - Linux</title>
    <link>https://blog.rsinha.org/categories/linux/</link>
    <description>All entries in Linux on blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-gb</language>
    
    <lastBuildDate>Sun, 05 Apr 2015 19:35:03 +0000</lastBuildDate>
    <atom:link href="https://blog.rsinha.org/categories/linux/index.xml" rel="self" type="application/rss+xml" />
    
      
      <item>
        <title>Inhibiting Sleep on Xubuntu 14.04</title>
        <link>https://blog.rsinha.org/2015/04/05/inhibiting-sleep-on-xubuntu-14-04/</link>
        <pubDate>Sun, 05 Apr 2015 19:35:03 +0000</pubDate>
        
        <guid>https://blog.rsinha.org/2015/04/05/inhibiting-sleep-on-xubuntu-14-04/</guid>
        <description>&lt;p&gt;My work laptop ships with proprietary encryption software that encrypts the disk drive (a self-encrypting drive) when turned off or in sleep mode. This works perfectly fine on Windows 7, but having rid my laptop of Windows in favour of Xubuntu, I soon realised that a day-to-day Linux desktop is for masochists.&lt;/p&gt;

&lt;p&gt;When the computer is set to sleep mode, the disk drive locks and Xubuntu doesn&amp;rsquo;t know how to unlock it when it wakes back up. Instead of the disk unlocking, I get a ton of ATA error messages about a missing disk, the laptop locks up and needs to be power cycled. To save me from myself, I removed the &amp;ldquo;Sleep&amp;rdquo; and &amp;ldquo;Hibernate&amp;rdquo; (can&amp;rsquo;t remember if this was already disabled) options from the logout menu, but there was still a chance that I might close the lid and lose hours of work.&lt;/p&gt;

&lt;p&gt;To disable the lid-close event from doing anything, you can make the following changes to &lt;code&gt;/etc/systemd/logind.conf&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;HandleSuspendKey=ignore
HandleHibernateKey=ignore
HandleLidSwitch=ignore
#Ignore ALL THE THINGS
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This tip is courtesy StackOverflow user &lt;a href=&#34;http://askubuntu.com/users/205327/john-t%C3%B6rnblom&#34;&gt;John Törnblom&lt;/a&gt; and this answer for &lt;a href=&#34;http://askubuntu.com/questions/362667/xubuntu-13-10-disabling-suspend-on-lid-being-closed&#34;&gt;Ubuntu 13.04&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Apart from the die-when-wake-up-from-sleep issue, I can highly recommend Xubuntu 14.04 as a daily desktop operating system for work. Heck, even PulseAudio does the right things with Bluetooth speakers &amp;amp; headsets and works as you&amp;rsquo;d expect.&lt;/p&gt;
</description>
      </item>
      
    
      
      <item>
        <title>Chunky binaries and bsdiff</title>
        <link>https://blog.rsinha.org/2015/01/14/chunky-binaries-and-bsdiff/</link>
        <pubDate>Wed, 14 Jan 2015 12:19:54 +0000</pubDate>
        
        <guid>https://blog.rsinha.org/2015/01/14/chunky-binaries-and-bsdiff/</guid>
        <description>&lt;p&gt;I&amp;rsquo;ve lately taken an interest in golang as it seems to be the language &lt;em&gt;du jour&lt;/em&gt; for web-services. My goto (hah) framework for writing tiny web applications is usually Flask (Python), which is still great for many things. One of my biggest gripes with Flask, and Python web applications in general, is the approach towards deploying 3rd party dependencies along with your application. Go&amp;rsquo;s approach to package management is a bit odd coming from Python-land, but it has the advantage of ensuring that your application doesn&amp;rsquo;t require 3rd party packages installed at runtime. Oh and static typing and all that is cool, too.&lt;/p&gt;

&lt;p&gt;If you&amp;rsquo;re not familiar with go, I highly recommend that you check out &lt;a href=&#34;https://tour.golang.org/welcome/1&#34;&gt;A Tour of Go&lt;/a&gt; and work your way through some of the examples to get a feel for it. One of the key features of go (and the one feature I care most about) is that your applications are native executable files that have dependencies baked-in and, in the case of web applications, come with an in-built HTTP server, instead of a myriad of scripts, configuration files etc. You can still chose to have configuration files for your application at runtime (e.g. a settings.json file), or set up environment variables as needed. This makes shipping your web application as easy as:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Compile your application (&lt;code&gt;go build&lt;/code&gt;). You may need to cross-compile if you&amp;rsquo;re deploying to a different architecture (e.g. x86-64). Cross-compiling is not as difficult as it sounds.&lt;/li&gt;
&lt;li&gt;Copy the generated binary over to the server that you want to run it. If you want, you could strip the binary to shave off a few MB.&lt;/li&gt;
&lt;li&gt;Run it :)&lt;/li&gt;
&lt;li&gt;Set up a reverse proxy to forward all traffic to your application. You only need to do this once.&lt;/li&gt;
&lt;li&gt;There is no step 5.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Contrast this with my current workflow for deploying Python web applications:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Ensure Python versions match on dev and prod. This can be a nightmare sometimes, but is avoidable by ensuring that dev and production match as closely as possible (use the same version of Ubuntu/Fedora/Debian). Not an issue if your dev box runs the same flavour of Linux as uat/prod.&lt;/li&gt;
&lt;li&gt;Ensure that native libraries required by Python packages are available on both dev and production hosts (I&amp;rsquo;m looking at you &lt;code&gt;libpq&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;Have a well defined fabfile for deployments, or similar. This is not really a complaint, I think &lt;code&gt;fab deploy&lt;/code&gt; sounds hilarious when said out loud and is also a nice way to deploy Python web applications.&lt;/li&gt;
&lt;li&gt;Restart apache/nginx so that it reloads your WSGI application. I think you can &lt;code&gt;touch&lt;/code&gt; a file and &lt;code&gt;mod_wsgi&lt;/code&gt; reloads your application, but this has never worked reliably for me.&lt;/li&gt;
&lt;li&gt;The way to set up debug logs for Python applications deployed with &lt;code&gt;mod_wsgi&lt;/code&gt; is not straightforward. I gave up after spending a few hours trying, this shouldn&amp;rsquo;t be that difficult! I&amp;rsquo;m stuck with trying to reproduce production issues on my dev box.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Executable files are all well and good but copying them over to production hosts multiple times a day, usually over SSH, can be slow if you&amp;rsquo;re on crappy DSL. If I need to do this for servers sitting inside my company&amp;rsquo;s network, I have to ship files inside an SSH tunnel &lt;em&gt;wrapped&lt;/em&gt; inside a VPN connection. This makes it unbearably slow for files larger than 10MB. Why can&amp;rsquo;t you just diff a binary file and upload &lt;em&gt;only&lt;/em&gt; the changed bits? Surely this is possible?&lt;/p&gt;

&lt;p&gt;This is when I discovered &lt;code&gt;bsdiff&lt;/code&gt; and its friend &lt;code&gt;bspatch&lt;/code&gt;. I guess I&amp;rsquo;m fairly late to this party, since &lt;code&gt;bsdiff&lt;/code&gt; has been around since the early 2000s (or earlier?). This pair of amazing utilities was written by the Colin Percival of &lt;a href=&#34;http://tarsnap.com&#34;&gt;Tarsnap&lt;/a&gt; fame. I understand that lots of binary applications use either &lt;code&gt;bsdiff&lt;/code&gt; or an application that uses a similar algorithm to generate patches for binary applications.&lt;/p&gt;

&lt;p&gt;The clue is in the name; &lt;code&gt;bsdiff&lt;/code&gt; lets you &lt;code&gt;diff&lt;/code&gt; an old binary with a new binary and generates a patch for you. You take this patch, give it to &lt;code&gt;bspatch&lt;/code&gt; along with an old binary and it gets transformed to the new one. If the changes between the binaries are small, the generated patch file (as you&amp;rsquo;d think) is tiny. On average, the patch file is 2-3% of the full binary for the application I&amp;rsquo;m working on. Instead of copying over the binary to a production host once I&amp;rsquo;ve compiled my application, I copy the patch instead:&lt;/p&gt;


mv binary binary.old
go build
bsdiff binary.old binary binary_patch
scp binary_patch /path/to/production/binary

# On production host
mv binary binary.old
bspatch binary.old binary binary_patch
# Need to do this because the binary loses +x 
chmod +x binary
# All done


&lt;p&gt;Your production host now has the latest version of your binary. I have not tested it on anything else but binaries generated by &lt;code&gt;go build&lt;/code&gt;, but there&amp;rsquo;s no reason why it shouldn&amp;rsquo;t work for binaries generated by other compilers.My next experiment will be to figure out how to reload the application after it receives a &lt;code&gt;SIGHUP&lt;/code&gt;. Go gives you &lt;code&gt;&amp;quot;os/signal&amp;quot;&lt;/code&gt; but I haven&amp;rsquo;t had the chance to play around with it yet.&lt;/p&gt;
</description>
      </item>
      
    
      
      <item>
        <title>Getting Live USB sticks to boot consistently</title>
        <link>https://blog.rsinha.org/2013/11/12/getting-live-usb-sticks-to-boot-consistently/</link>
        <pubDate>Tue, 12 Nov 2013 20:53:18 +0000</pubDate>
        
        <guid>https://blog.rsinha.org/2013/11/12/getting-live-usb-sticks-to-boot-consistently/</guid>
        <description>&lt;p&gt;Occasionally I like to boot my desktop running Windows from a USB stick to try out the latest version of a Linux distribution on hardware &amp;ndash; as opposed to running it in VirtualBox. I remember that this used to be straightforward on my old Acer laptop, but it&amp;rsquo;s hit and miss on my desktop. I&amp;rsquo;ve not quite figured out why boot-from-USB fails occasionally, but I&amp;rsquo;ve found great way around it.&lt;/p&gt;

&lt;p&gt;Enter the &lt;a href=&#34;http://www.plop.at/en/bootmanager/index.html&#34;&gt;plop boot manager&lt;/a&gt;. Install this nifty little tool and it gives you a boot menu before windows starts up. You can now select your USB stick and it should boot, provided that unetbootin or a similar tool did it&amp;rsquo;s job.&lt;/p&gt;
</description>
      </item>
      
    
      
      <item>
        <title>Giving up on Linux desktop</title>
        <link>https://blog.rsinha.org/2012/09/15/giving-up-on-native-linux/</link>
        <pubDate>Sat, 15 Sep 2012 21:36:28 +0000</pubDate>
        
        <guid>https://blog.rsinha.org/2012/09/15/giving-up-on-native-linux/</guid>
        <description>&lt;p&gt;I recently acquired a shiny new-ish desktop from a friend. Intel Core-i7 with 8 cores and a whopping 12 GB of RAM with a high-end ATI Radeon graphics card. It came with Windows 7 pre-installed and I decided to install Ubuntu 12.04 amd64 as a dual boot option. Initially, I had some trouble getting it to install on the inbuilt SSD (which should have been the first warning sign in retrospect). Having gotten it to install on the slower 500GB HDD, I was quite happy with it until I ran into the first few glitches. These issues were small to begin with but they irked me enough to get rid of Ubuntu altogether from the system.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The audio was glitchy. At first I thought this had something to do with Adobe Flash which has historically been rubbish on Linux and &lt;em&gt;especially&lt;/em&gt; on 64 bit Linux. I removed amd64 and replaced it with the 32 bits release instead. It turned out that audio was glitchy even for other applications (Rhythmbox, Spotify) regardless of the bitness. By glitchy I mean that it stuttered randomly if I so much as scrolled inside a browser window. As a responsible netizen, I&amp;rsquo;ve reported a bug but I don&amp;rsquo;t expect it to be fixed anytime soon.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Suspend to RAM was not available as an option. Suspend to disk worked sometimes but the computer often refused to &amp;ldquo;wake up&amp;rdquo; after going to sleep.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;I tried to like Unity, I really did. It didn&amp;rsquo;t really work for my workflow which involves running multiple terminals. There might be an easier way to smoothly switch between windows of the same application but I could not find it. OSX, for example, has this nice feature that lets you use number keys to switch between terminals (Cmd+1, Cmd+2, etc.).&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Compiz was also glitchy for me, even with the proprietary fglrx drivers.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I love the power of having a bash shell at hand but using Linux as a full time desktop OS is &lt;em&gt;still&lt;/em&gt; a nightmare. I want to just boot my system and get shit done and I don&amp;rsquo;t want to have to fiddle around with pulseaudio or any other crap. I have an older laptop running the old Ubuntu LTS just fine; I think that if you have old or fully supported hardware (mostly anything but ATI graphics), it &lt;em&gt;just works&lt;/em&gt;. In any case, I suspect I&amp;rsquo;ll probably try again when the next Ubuntu LTS release is out. Until then I am grudgingly obliged to run Ubuntu as a virtual machine on the Windows system.&lt;/p&gt;

&lt;p&gt;A quick tip to get rid of grub from within Windows 7. Use &lt;a href=&#34;http://www.sysint.no/nedlasting/mbrfix.htm&#34;&gt;MbrFix&lt;/a&gt;. You might want to be careful though, the wrong command could wreck your hard disk(s).&lt;/p&gt;
</description>
      </item>
      
    
      
      <item>
        <title>Prevent accidental rm</title>
        <link>https://blog.rsinha.org/2012/05/05/prevent-accidental-rm/</link>
        <pubDate>Sat, 05 May 2012 15:53:46 +0000</pubDate>
        
        <guid>https://blog.rsinha.org/2012/05/05/prevent-accidental-rm/</guid>
        <description>&lt;p&gt;If you&amp;rsquo;re anything like me, you might casually type &lt;code&gt;rm -rf *&lt;/code&gt; in your home directory when you really meant to delete the contents of another directory. You should, of course, always have a backup of the contents of your home directory just in case this happens.&lt;/p&gt;

&lt;p&gt;There is simple hack to force &lt;code&gt;rm&lt;/code&gt; to prompt you to think about the files that are going to be deleted. Create a file called &amp;lsquo;-i&amp;rsquo; in the directory whose contents you want to protect from accidental deletion.&lt;/p&gt;

&lt;p&gt;An easy way to do this is to run &lt;code&gt;touch ./-i&lt;/code&gt; which gives you:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ritesh@viridian:/var/tmp/aa$ ls -a
-i      .       ..      100.txt 200.txt l.txt   seq.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you now try and run rm -rf * now, this is what happens instead of everything getting nuked all at once.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ritesh@viridian:/var/tmp/aa$ rm -rf *
remove 100.txt? 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I&amp;rsquo;ve tried this on bash, I&amp;rsquo;m not sure if this works with other shells (zsh, ksh). Sure, you could always remember to use &lt;code&gt;rm -rfi&lt;/code&gt; but who can remember that whole extra letter?&lt;/p&gt;
</description>
      </item>
      
    
      
      <item>
        <title>Do batch things well</title>
        <link>https://blog.rsinha.org/2011/12/04/do-batch-things-well/</link>
        <pubDate>Sun, 04 Dec 2011 11:24:19 +0000</pubDate>
        
        <guid>https://blog.rsinha.org/2011/12/04/do-batch-things-well/</guid>
        <description>&lt;p&gt;I sometimes forget this really easy one liner for doing things in a batch on Linux/MacOS.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# for file in `find . -type f`; do somescript.py $file; done
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you&amp;rsquo;re relying on the output of find it is probably best to use the &lt;code&gt;xargs&lt;/code&gt; option to &lt;code&gt;find&lt;/code&gt; like so:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# find . -type f -print0 | xargs -0 somescript.py
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Even better, you can avoid using &lt;code&gt;xargs&lt;/code&gt;, instead use the &lt;code&gt;exec&lt;/code&gt; option to find. Although I think this is available only on newer versions of &lt;code&gt;find&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# find . -type f -exec somescript.py &#39;{}&#39; +
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Sure, I could&amp;rsquo;ve written the batch file handling feature as part of my script but why waste my time when there are existing tools that already &lt;a href=&#34;http://en.wikipedia.org/wiki/Unix_philosophy#McIlroy:_A_Quarter_Century_of_Unix&#34;&gt;do one thing well&lt;/a&gt;?&lt;/p&gt;
</description>
      </item>
      
    
      
      <item>
        <title>Creating an Animated GIF</title>
        <link>https://blog.rsinha.org/2011/11/12/creating-an-animated-gif/</link>
        <pubDate>Sat, 12 Nov 2011 13:32:09 +0000</pubDate>
        
        <guid>https://blog.rsinha.org/2011/11/12/creating-an-animated-gif/</guid>
        <description>&lt;p&gt;There are many ways to do this. You could use Windows Movie Maker, iMovie or professional movie editing applications. If you&amp;rsquo;re looking for something quick and dirty from the command line, especially if you have all images in one directory and they don&amp;rsquo;t require any post processing, &lt;a href=&#34;http://imagemagick.org&#34;&gt;ImageMagick&lt;/a&gt; can help.&lt;/p&gt;

&lt;p&gt;ImageMagick is available for for Windows, Linux and MacOS X. The convert utility that comes with it is probably one of the most useful utilities I&amp;rsquo;ve ever used. Take for example, the task of converting a BMP image to JPEG.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ convert mypic001.bmp mypic001.jpg
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Similarly, to convert a directory full of JPEG images to an animated GIF do this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ convert -loop 0 -delay 100 -size 200x200 *.jpg animated.gif
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Delay represents the time in milliseconds between each frame, and loop 0 ensures that the animation runs forever. The files in the directory are numbered incrementally, so they should be added in the correct order. Ensure that the dimensions of the resulting GIF are not too large, anything over 300x300 made my browser choke. For more information, check out the &lt;a href=&#34;http://www.imagemagick.org/Usage/anim_basics/&#34;&gt;documentation&lt;/a&gt;.&lt;/p&gt;
</description>
      </item>
      
    
  </channel>
</rss>
