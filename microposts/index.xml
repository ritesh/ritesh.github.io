<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>

    <title>@rsinhaâ€™s blog - Microposts</title>
    <link>https://blog.rsinha.org/microposts/</link>
    <description>All entries in Microposts on blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-gb</language>
    
    <lastBuildDate>Sun, 10 Sep 2017 20:19:00 +0100</lastBuildDate>
    <atom:link href="/microposts/" rel="self" type="application/rss+xml" />
    
      
      <item>
        <title>The Go Programming Language</title>
        <link>https://blog.rsinha.org/microposts/2017-09-10-go-prog-language/</link>
        <pubDate>Sun, 10 Sep 2017 20:19:00 +0100</pubDate>
        <author> (Ritesh Sinha)</author>
        <guid>https://blog.rsinha.org/microposts/2017-09-10-go-prog-language/</guid>
        <description>&lt;p&gt;I have too many books to read, and too little time! I&amp;rsquo;m currently making my way through &lt;a href=&#34;https://www.amazon.co.uk/Programming-Language-Addison-Wesley-Professional-Computing-ebook/dp/B0184N7WWS/ref=sr_1_4?s=books&amp;amp;ie=UTF8&amp;amp;qid=1505071377&amp;amp;sr=1-4&#34;&gt;The Go Programming Language&lt;/a&gt; by Alan Donovan &amp;amp; the Brian Kernighan, slowly but steadily. I&amp;rsquo;d purchased the book a while ago, but have been reading it in bite sized chunks. I&amp;rsquo;m somewhat familiar with Go as it is fairly easy to learn and you don&amp;rsquo;t have to keep fighting the compiler but it gives you excellent compile time guarantees. This makes it an easy language to pick up for someone familiar with Python (and without a software development background).&lt;/p&gt;

&lt;p&gt;There are some aspects of the language that I don&amp;rsquo;t yet fully understand and I&amp;rsquo;m always keen to improve. This book is an enjoyable introduction to the language and feels like an excellent text book on the subject - with exercises that I should probably do, at some point. I suspect that even seasoned programmers will get a lot of out it as it covers some interesting bugs from programs that are syntactically correct, but logically wrong. It is often easy to resort to stackoverflow or find a blog post about a particular issue when learning a new language and hitting a wall but it is easier to dive deep to get a better understanding, especially when you&amp;rsquo;re learning a new language.&lt;/p&gt;
</description>
      </item>
      
    
      
      <item>
        <title>header files</title>
        <link>https://blog.rsinha.org/microposts/header-files/</link>
        <pubDate>Tue, 07 Mar 2017 22:38:48 +0000</pubDate>
        <author> (Ritesh Sinha)</author>
        <guid>https://blog.rsinha.org/microposts/header-files/</guid>
        <description>&lt;p&gt;Trying to build a Qt project on Linux today. Turns out, (some) Qt programmers are case insensitive when it comes to including heAdEr fiLEs in C++ source. This is fine on Windows and macOS, but on an OS with a case sensitive filesystem like &lt;code&gt;ext4&lt;/code&gt;, this causes a whole lot of problems. &lt;code&gt;gcc&lt;/code&gt; and &lt;code&gt;g++&lt;/code&gt; try and fail to find &lt;code&gt;coolHeader.h&lt;/code&gt; if it&amp;rsquo;s called &lt;code&gt;CoolHeader.h&lt;/code&gt;. I&amp;rsquo;m sure that this isn&amp;rsquo;t an uncommon problem, but I couldn&amp;rsquo;t find a solution that didn&amp;rsquo;t involve serious &lt;code&gt;sed&lt;/code&gt;-fu.&lt;/p&gt;

&lt;p&gt;There&amp;rsquo;s an easier hack, if you&amp;rsquo;re not ready to use lowercase header filenames in your C++ code like Bjarne Stroustrup probably intended. Create an empty file large enough to contain both your source and build artifacts, format it as a FAT32 volume and mount it as a loop device. Use this loop device to build your code.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;dd if=/dev/zero of=/fakedisk bs=1024 count=200000 
losetup /dev/loop0 /fakedisk 
mkfs.vfat /dev/loop0 # Make it a VFAT filesystem
mkdir /mnt/faker
mount -t vfat /dev/loop0 /mnt/faker
cp -Rv ~/your/QtCode /mnt/faker/
cd /mnt/faker/QtCode/ &amp;amp;&amp;amp; qmake -makefile
make # Job done, off to the pub 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But hey, if &lt;code&gt;sed&lt;/code&gt; works to refactor your codebase, more power to you!&lt;/p&gt;
</description>
      </item>
      
    
  </channel>
</rss>
